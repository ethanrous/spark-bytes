basePath: /api/
definitions:
  EventInfo:
    properties:
      attendees:
        type: integer
      description:
        type: string
      dietaryInfo:
        type: string
      endTime:
        type: integer
      eventId:
        type: integer
      location:
        type: string
      name:
        type: string
      owner:
        $ref: '#/definitions/OwnerInfo'
      startTime:
        type: integer
    type: object
  LoginParams:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  NewEventParams:
    properties:
      attendees:
        type: integer
      description:
        type: string
      dietary_info:
        type: string
      end_time:
        type: integer
      location:
        type: string
      name:
        type: string
      owner_id:
        type: integer
      start_time:
        type: integer
    type: object
  NewUserParams:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
    type: object
  OwnerInfo:
    properties:
      email:
        type: string
      firstName:
        type: string
      joinedAt:
        type: string
      lastName:
        type: string
    type: object
  UserInfo:
    properties:
      email:
        type: string
      firstName:
        type: string
      joinedAt:
        type: string
      lastName:
        type: string
      verified:
        type: boolean
    type: object
host: localhost:5001
info:
  contact: {}
  description: Access to the SparkBytes server
  title: SparkBytes API
  version: "1.0"
paths:
  /events:
    get:
      operationId: GetEvents
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/EventInfo'
            type: array
        "401":
          description: Unauthorized
      summary: Get All Events
      tags:
      - Events
    post:
      operationId: CreateEvent
      parameters:
      - description: New event params
        in: body
        name: newEventParams
        required: true
        schema:
          $ref: '#/definitions/NewEventParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Create Event
      tags:
      - Events
  /users:
    get:
      operationId: GetUser
      parameters:
      - description: User email
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserInfo'
        "401":
          description: Unauthorized
      summary: Get User
      tags:
      - Users
    post:
      operationId: CreateUser
      parameters:
      - description: New user params
        in: body
        name: newUserParams
        required: true
        schema:
          $ref: '#/definitions/NewUserParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Create User
      tags:
      - Users
  /users/{userId}/verify:
    post:
      operationId: VerifyUser
      parameters:
      - description: UserId to verify
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
      summary: Verify a user
      tags:
      - Users
  /users/login:
    post:
      operationId: LoginUser
      parameters:
      - description: Login params
        in: body
        name: loginParams
        required: true
        schema:
          $ref: '#/definitions/LoginParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserInfo'
        "401":
          description: Unauthorized
      summary: Login User
      tags:
      - Users
  /users/logout:
    post:
      operationId: LogoutUser
      responses:
        "200":
          description: OK
      summary: Logout User
      tags:
      - Users
  /users/me:
    get:
      operationId: GetLoggedInUser
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserInfo'
        "401":
          description: Unauthorized
      summary: Get Logged in user
      tags:
      - Users
schemes:
- http
- https
securityDefinitions:
  SessionAuth:
    in: cookie
    name: spark-bytes-session
    type: apiKey
swagger: "2.0"
